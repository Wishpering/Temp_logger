#!/usr/bin/python3

from os import system, getuid
from os.path import exists, abspath, dirname
from argparse import ArgumentParser

def check_Permissions():
    if getuid() != 0:
        print("This move need root privileges")
        exit()

def check_Args(args):
    if args.get('autostart') and args.get('disable_autostart'):
        print('Неверный набор флагов - -rma и -a')
        exit()

    if args.get('start') and args.get('quiet'):
        print('Либо простой запуск, либо тихий запуск')
        exit()

def check_For_Paths(Path):
    # Проверяем, есть ли все необходимые папки, если нет - то создаем их
    if not exists(Path + '/auth'):
        print('Creating auth directory ...')
        system('mkdir ' + Path + '/auth')
    
    if not exists(Path + '/configs'):
        print('Creating config directory ...')
        system('mkdir ' + Path + '/configs')

    if not exists(Path + '/data'):
        print('Creating data directory ...')
        system('mkdir ' + Path + '/data')

    if not exists(Path + '/logs'):
        print('Creating logs directory ...')
        system('mkdir ' + Path + '/logs')

    if not exists(Path + '/configs/config.json'):
        print('Не найден конфигурационный -файл, положите его в папку config и перезапустите программу')
        exit()

    if not exists(Path + '/auth/auth.json'):
        print('Не найден auth.json файл, положите его в папку auth и перезапустите программу')
        exit()

if __name__ == '__main__':
    Path = dirname(abspath(__file__))
    log_Path = Path + '/logs/stdout.log'
    src_Path = Path + '/src/'

    daemon_File = '[Unit]' + '\n' \
    + 'Description=Temperature logger' + '\n' \
    + 'After=network.target' + '\n' + '\n'\
    + '[Service]' + '\n' \
    + 'ExecStart=python3 ' + src_Path + 'main.py' + '\n' \
    + 'Restart=on-failure' + '\n' + '\n' \
    + '[Install]' + '\n' \
    + 'WantedBy=multi-user.target'

    Parser = ArgumentParser(description = 'Script to control temperature logger')
    Parser.add_argument('-d', '--daemonize', action = 'store_true', help = 'Daemonize bot')
    Parser.add_argument('-a', '--autostart', action = 'store_true', help = 'Autostart bot')
    Parser.add_argument('-rma', '--disable-autostart', action = 'store_true', help = 'Disable autostart')
    Parser.add_argument('-st', '--stats', action = 'store_true', help = 'Daemon info, run without other args')
    Parser.add_argument('-s', '--start', action = 'store_true', help = 'Start bot in foreground')
    Parser.add_argument('-q', '--quiet', action = 'store_true', help = 'Start in background')
    Parser.add_argument('-k', '--stop', action = 'store_true', help = 'Stop bot')
    Parser.add_argument('-ws', '--web-server', action = 'store_true', help = 'Run simple webserver on IP:1435 to check temp from sensor, run standalone')
    Parser.add_argument('-kws', '--kill-web-server', action = 'store_true', help = 'Kill webserver')
    
    args = vars(Parser.parse_args())

    # Проверяем, есть ли все необходимые директории
    check_For_Paths(Path)
    check_Args(args)

    if args.get('web_server'):
        print('Starting web server ...')

        system(f'nohup python3 {src_Path}simple_webserver.py > {log_Path} &') 

        exit()

    if args.get('kill_web_server'):
        system(f'killall -9 python3 {src_Path}simple_webserver.py >> /dev/null')
        exit()
        
    # Если выбрана демонизация
    if args.get('daemonize'):
        # Проверяем на наличие рут прав
        check_Permissions()

        # Если юнита нет, то создаем его
        if not exists('/etc/systemd/system/temp_monitoring.service'):
            with open('/etc/systemd/system/temp_monitoring.service', 'w') as file:
                file.write(daemon_File)

                # Выставляем права и ищем созданный юнит 
                system('chmod 644 /etc/systemd/system/temp_monitoring.service && systemctl daemon-reload')

            exit()
      
        else:
            print('Already daemonized, skipping ...')
            exit()

    # Добавление юнита в автозагрузку
    if args.get('autostart'):
        check_Permissions()

        if exists('/etc/systemd/system/temp_monitoring.service'):
            system('systemctl enable temp_monitoring')
            exit()
        else:
            print('Unit not found, cannot enable autostart')
            exit()

    # Удаление юнита из автозагрузки
    if args.get('disable_autostart'):
        check_Permissions()

        if exists('/etc/systemd/system/temp_monitoring.service'):
            system('systemctl disable temp_monitoring')
            exit()
        else:
            print('Unit not found, cannot disable autostart')
            exit()

    # Инфа о юните
    if args.get('stats'):
        if exists('/etc/systemd/system/temp_monitoring.service'):
            system('systemctl status temp_monitoring')
            exit()

        else:
            print('Daemon not found')
            exit()

    # Для запуска в тихом режиме
    if args.get('quiet'):
        print('Starting logger quiet ...')

        system(f'nohup python3 {src_Path}main.py > {log_Path} &')
        exit()

    # Обычный запуск
    if args.get('start'):
        print('Starting logger ...')

        system(f'python3 {src_Path}main.py')
        exit()

    # Для прибивания бота
    if args.get('stop'):
        try:
            if exists('/etc/systemd/system/temp_monitoring.service') and system('systemctl is-active --quiet temp_monitoring') == 0:
                system('systemctl stop temp_monitoring')
                exit()

            else:
                system('pkill -f "temp_dat/src/main.py"')
                exit()

        except PermissionError:
            print('Not enough rights to stop bot')
            exit()

    # Если аргументов на вход не дано
    else:
        if exists('/etc/systemd/system/temp_monitoring.service'):
            
            # Проверяем, не запущен ли уже юнит?
            if system('systemctl is-active --quiet temp_monitoring') != 0:
                print('Starting temp.service ...')

                system('systemctl start temp_monitoring')

            else:
                print('Service already running, or can\'t start it')
    
        else:
            print('Starting ...')

            system(f'python3 {src_Path}main.py')
